openapi: 3.0.0
info:
  title: Pet Store API
  version: 1.0.0
  description: A simple pet store API for demonstration

servers:
  - url: https://petstore.example.com/api/v1
    description: Production server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Bearer token authentication

  schemas:
    Pet:
      type: object
      required:
        - name
        - species
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Fluffy"
        species:
          type: string
          enum: [dog, cat, bird, fish]
          example: "cat"
        age:
          type: integer
          minimum: 0
          maximum: 30
          example: 3
        owner:
          type: string
          example: "John Doe"

paths:
  /pets:
    get:
      summary: List all pets
      description: Retrieve a list of all pets in the store
      operationId: listPets
      tags:
        - Pets
      parameters:
        - name: limit
          in: query
          description: Maximum number of pets to return
          required: false
          schema:
            type: integer
            default: 10
            maximum: 100
        - name: species
          in: query
          description: Filter by species
          required: false
          schema:
            type: string
            enum: [dog, cat, bird, fish]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'

    post:
      summary: Create a new pet
      description: Add a new pet to the store
      operationId: createPet
      tags:
        - Pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

  /pets/{petId}:
    get:
      summary: Get pet by ID
      description: Retrieve detailed information about a specific pet
      operationId: getPet
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: ID of the pet to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found

    put:
      summary: Update a pet
      description: Update an existing pet's information
      operationId: updatePet
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: ID of the pet to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

    delete:
      summary: Delete a pet
      description: Remove a pet from the store
      operationId: deletePet
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: ID of the pet to delete
          schema:
            type: integer
      responses:
        '204':
          description: Pet deleted successfully
