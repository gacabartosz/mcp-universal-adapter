"""
{{ api_spec.name }} MCP Server
{{ "=" * (api_spec.name|length + 11) }}

{{ api_spec.description or "MCP server for " ~ api_spec.name }}

Auto-generated by MCP Universal Adapter
Version: {{ api_spec.version }}
Base URL: {{ base_url }}
"""

import os
import asyncio
from typing import Any, Dict, Optional
import httpx
from mcp.server import Server
from mcp.types import Tool, TextContent

# Initialize MCP server
server = Server("{{ api_spec.name|lower|replace(' ', '-') }}-mcp")

# Configuration
BASE_URL = os.getenv("API_BASE_URL", "{{ base_url }}")
{% if has_auth %}
{% if auth_type.value == "api_key" %}
{{ auth_name }} = os.getenv("{{ auth_name }}", "")
{% elif auth_type.value == "bearer" %}
BEARER_TOKEN = os.getenv("BEARER_TOKEN", "")
{% elif auth_type.value == "basic" %}
API_USERNAME = os.getenv("API_USERNAME", "")
API_PASSWORD = os.getenv("API_PASSWORD", "")
{% endif %}
{% endif %}


def get_headers() -> Dict[str, str]:
    """Build request headers with authentication."""
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "MCP-Universal-Adapter/1.0"
    }

    {% if has_auth %}
    {% if auth_type.value == "api_key" %}
    if {{ auth_name }}:
        headers["{{ auth_name }}"] = {{ auth_name }}
    {% elif auth_type.value == "bearer" %}
    if BEARER_TOKEN:
        headers["Authorization"] = f"Bearer {BEARER_TOKEN}"
    {% elif auth_type.value == "basic" %}
    if API_USERNAME and API_PASSWORD:
        import base64
        credentials = base64.b64encode(f"{API_USERNAME}:{API_PASSWORD}".encode()).decode()
        headers["Authorization"] = f"Basic {credentials}"
    {% endif %}
    {% endif %}

    return headers


@server.list_tools()
async def list_tools() -> list[Tool]:
    """List all available MCP tools."""
    return [
        {% for endpoint in endpoints %}
        Tool(
            name="{{ endpoint.tool_name }}",
            description="{{ endpoint.summary or endpoint.description or (endpoint.method.value ~ ' ' ~ endpoint.path) }}",
            inputSchema={
                "type": "object",
                "properties": {
                    {% for param in endpoint.parameters %}
                    "{{ param.name }}": {
                        "type": "{{ param.schema.type if param.schema else param.type }}",
                        {% if param.description %}
                        "description": "{{ param.description }}",
                        {% endif %}
                        {% if param.schema and param.schema.enum %}
                        "enum": {{ param.schema.enum }},
                        {% endif %}
                        {% if param.default is not none %}
                        "default": {{ param.default }},
                        {% endif %}
                    },
                    {% endfor %}
                    {% if endpoint.request_body %}
                    {% for prop_name, prop in endpoint.request_body.properties.items() %}
                    "{{ prop_name }}": {
                        "type": "{{ prop.type }}",
                        {% if prop.description %}
                        "description": "{{ prop.description }}",
                        {% endif %}
                    },
                    {% endfor %}
                    {% endif %}
                },
                "required": [
                    {% for param in endpoint.parameters if param.required %}
                    "{{ param.name }}",
                    {% endfor %}
                    {% if endpoint.request_body %}
                    {% for req in endpoint.request_body.required %}
                    "{{ req }}",
                    {% endfor %}
                    {% endif %}
                ],
            },
        ),
        {% endfor %}
    ]


{% for endpoint in endpoints %}
async def {{ endpoint.tool_name }}(
    {% for param in endpoint.parameters %}
    {{ param.name }}: {{ param.type }}{% if not param.required %} = {{ param.default if param.default is not none else 'None' }}{% endif %},
    {% endfor %}
    {% if endpoint.request_body %}
    {% for prop_name, prop in endpoint.request_body.properties.items() %}
    {{ prop_name }}: {{ prop.type }}{% if prop_name not in endpoint.request_body.required %} = {{ prop.default if prop.default is not none else 'None' }}{% endif %},
    {% endfor %}
    {% endif %}
) -> Dict[str, Any]:
    """
    {{ endpoint.summary or endpoint.description or (endpoint.method.value ~ " " ~ endpoint.path) }}

    {% if endpoint.description and endpoint.summary != endpoint.description %}
    {{ endpoint.description }}
    {% endif %}

    Endpoint: {{ endpoint.method.value }} {{ endpoint.path }}
    {% if endpoint.tags %}
    Tags: {{ endpoint.tags|join(', ') }}
    {% endif %}

    Args:
    {% for param in endpoint.parameters %}
        {{ param.name }} ({{ param.type }}): {{ param.description or 'No description' }}{% if not param.required %} (optional){% endif %}

    {% endfor %}
    {% if endpoint.request_body %}
    {% for prop_name, prop in endpoint.request_body.properties.items() %}
        {{ prop_name }} ({{ prop.type }}): {{ prop.description or 'No description' }}{% if prop_name not in endpoint.request_body.required %} (optional){% endif %}

    {% endfor %}
    {% endif %}

    Returns:
        Dict[str, Any]: API response
    """
    # Build URL with path parameters
    url = BASE_URL + "{{ endpoint.path }}"
    {% for param in endpoint.path_parameters %}
    url = url.replace("{{'{'}}{{ param.name }}{{'}'}}", str({{ param.name }}))
    {% endfor %}

    # Build query parameters
    params = {}
    {% for param in endpoint.query_parameters %}
    if {{ param.name }} is not None:
        params["{{ param.name }}"] = {{ param.name }}
    {% endfor %}

    # Build request body
    {% if endpoint.request_body %}
    body = {
        {% for prop_name in endpoint.request_body.properties.keys() %}
        "{{ prop_name }}": {{ prop_name }},
        {% endfor %}
    }
    # Remove None values
    body = {k: v for k, v in body.items() if v is not None}
    {% else %}
    body = None
    {% endif %}

    # Make request
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            response = await client.request(
                method="{{ endpoint.method.value }}",
                url=url,
                params=params,
                json=body,
                headers=get_headers(),
            )
            response.raise_for_status()
            return response.json() if response.text else {"status": "success"}
        except httpx.HTTPStatusError as e:
            return {
                "error": f"HTTP {e.response.status_code}",
                "message": e.response.text,
            }
        except Exception as e:
            return {
                "error": "Request failed",
                "message": str(e),
            }


{% endfor %}

@server.call_tool()
async def call_tool(name: str, arguments: Any) -> list[TextContent]:
    """Handle tool calls from MCP client."""
    # Map tool names to functions
    tools = {
        {% for endpoint in endpoints %}
        "{{ endpoint.tool_name }}": {{ endpoint.tool_name }},
        {% endfor %}
    }

    if name not in tools:
        return [TextContent(type="text", text=f"Unknown tool: {name}")]

    # Call the tool
    try:
        result = await tools[name](**arguments)
        import json
        return [TextContent(type="text", text=json.dumps(result, indent=2))]
    except Exception as e:
        return [TextContent(type="text", text=f"Error: {str(e)}")]


async def main():
    """Run the MCP server."""
    {% if has_auth %}
    {% if auth_type.value == "api_key" %}
    if not {{ auth_name }}:
        print("‚ö†Ô∏è  Warning: {{ auth_name }} not set. Set it in environment or .env file.")
    {% elif auth_type.value == "bearer" %}
    if not BEARER_TOKEN:
        print("‚ö†Ô∏è  Warning: BEARER_TOKEN not set. Set it in environment or .env file.")
    {% elif auth_type.value == "basic" %}
    if not API_USERNAME or not API_PASSWORD:
        print("‚ö†Ô∏è  Warning: API_USERNAME or API_PASSWORD not set.")
    {% endif %}
    {% endif %}

    print(f"üöÄ Starting {{ api_spec.name }} MCP Server")
    print(f"   Base URL: {BASE_URL}")
    print(f"   Tools: {{ endpoints|length }}")

    from mcp.server.stdio import stdio_server

    async with stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            server.create_initialization_options(),
        )


if __name__ == "__main__":
    asyncio.run(main())
